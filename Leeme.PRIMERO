1. Lee y cuidadosamente cada uno de los archivos, entendiendo lo que hace cada
   una de las funciones. En caso de funciones y variables de la forma yyXXXX 
   están documentadas en el manual de referencia de Flex.

3. Documenta todo el código y las modificaciones que escribas.

4. La primera parte del compilador consiste en completar el analizador 
   léxico que se te proporciona (mlp.l).

5. Los archivos que están en este subdirectorio están listos para 
   compilarse a través de un archivo de proyecto de C.

Su contenido es el siguiente:

Leeme.Primero  : Lo estás leyendo en este momento.

mlp.l       : Contiene un escáner (analizador léxico) que reconoce
                  espacios, nuevas líneas,los tokens COMA, PARA y ENTERO, 
                  en cada caso ajustando la cuenta de la posición del apuntador
                  en el archivo.
                 (Esto lo usaremos posteriormente para notificar errores). 
                 Este es el archivo que se debe completar para reconocer los
                 tokens correspondientes al lenguaje descrito en el manual.

driver.c       : Contiene la función main() que se encarga de probar el escáner
                 sobre un archivo de prueba dado. También se debe modificar 
                 este archivo para tomar en cuenta los casos de tokens 
                 agregados a simple.lex

errormsg.c     : Contiene funciones de manejo de errores, manejo del archivo
                 de entrada y manejo de nueva línea.

util.c         : Contiene las funciones de utilería para construir cadenas
                 y listas genéricas. 

ytab.h          : Contiene las definiciones de tokens que usaremos. 
                 No modifiques este archivo pues será generado 
                 automáticamente en la etapa de análisis sintáctico.

Más todos los otros archivos .h de inclusión.
                
lexyy.c es el archivo que contiene la función de análisis léxico
yylex() y es generado al ejecutar flex sobre simple.lex.

7. El programa ej1.mlp ejemplifica algunas de las características del 
lenguaje y puedes probar sobre él tu analizador léxico resultante. 
(Posteriormente se enviarán por correo programas de ejemplo con las 
características adicionales del compilador).

